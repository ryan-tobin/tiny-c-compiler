# .github/workflows/ci.yml
name: TinyC Compiler CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        gcc-version: [9, 10, 11, 12]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup GCC ${{ matrix.gcc-version }}
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-${{ matrix.gcc-version }}
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ matrix.gcc-version }} 100
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential valgrind
        
    - name: Show environment
      run: |
        echo "GCC version:"
        gcc --version
        echo "Make version:"
        make --version
        echo "System info:"
        uname -a
        
    - name: Build compiler
      run: |
        make clean
        make all
        
    - name: Run unit tests
      run: |
        make test
        
    - name: Run integration tests
      run: |
        make examples
        
    - name: Test example programs
      run: |
        # Test hello world
        ./build/tcc examples/hello_world.tc
        ./hello_world
        test $? -eq 0
        
        # Test factorial
        ./build/tcc examples/factorial.tc  
        ./factorial
        test $? -eq 120
        
        # Test fibonacci
        ./build/tcc examples/fibonacci.tc
        timeout 5s ./fibonacci || true  # Prevent infinite recursion timeout
        
    - name: Memory leak check (Debug build)
      run: |
        make clean
        make debug
        # Run a simple test under valgrind
        echo 'int main() { return 42; }' > test_memory.tc
        valgrind --leak-check=full --error-exitcode=1 ./build/tcc test_memory.tc
        rm -f test_memory.tc test_memory
        
    - name: Performance benchmark
      run: |
        # Benchmark compilation time
        echo "Benchmarking compilation performance..."
        time ./build/tcc examples/fibonacci.tc -o bench_fib
        time ./build/tcc examples/factorial.tc -o bench_fact
        rm -f bench_fib bench_fact
        
    - name: Code coverage (Ubuntu only)
      if: matrix.os == 'ubuntu-latest' && matrix.gcc-version == '11'
      run: |
        # Install gcov/lcov
        sudo apt-get install -y lcov
        
        # Build with coverage
        make clean
        CFLAGS="-coverage -O0" make all
        
        # Run tests
        make test
        
        # Generate coverage report
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info
        
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.gcc-version == '11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: build-artifacts-${{ matrix.os }}-gcc${{ matrix.gcc-version }}
        path: |
          build/
          *.s
          examples/hello_world
          examples/fibonacci  
          examples/factorial

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Run cppcheck
      run: |
        sudo apt-get install -y cppcheck
        cppcheck --enable=all --error-exitcode=1 --suppress=missingIncludeSystem src/
        
    - name: Run static analysis with scan-build
      run: |
        sudo apt-get install -y clang-tools
        scan-build --status-bugs make clean all

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Install Doxygen
      run: |
        sudo apt-get install -y doxygen graphviz
        
    - name: Generate documentation
      run: |
        # Create basic Doxyfile if it doesn't exist
        if [ ! -f Doxyfile ]; then
          doxygen -g
          # Configure for C project
          sed -i 's/PROJECT_NAME           = "My Project"/PROJECT_NAME           = "TinyC Compiler"/' Doxyfile
          sed -i 's/INPUT                  =/INPUT                  = src/' Doxyfile
          sed -i 's/RECURSIVE              = NO/RECURSIVE              = YES/' Doxyfile
          sed -i 's/EXTRACT_ALL            = NO/EXTRACT_ALL            = YES/' Doxyfile
        fi
        doxygen
        
    - name: Deploy documentation
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./html

  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Build optimized release
      run: |
        make clean
        make release
        
    - name: Create release archive
      run: |
        mkdir -p release
        cp build/tcc release/
        cp -r examples release/
        cp -r runtime release/
        cp README.md LICENSE release/
        tar -czf tinyc-compiler-${{ github.event.release.tag_name }}.tar.gz release/
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./tinyc-compiler-${{ github.event.release.tag_name }}.tar.gz
        asset_name: tinyc-compiler-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip